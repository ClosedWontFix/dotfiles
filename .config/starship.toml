# -*- conf-toml -*-
# vim: ft=toml
#
# File: ~/.config/starship.toml
# Author: Dan Borkowski
#

# Get editor completions based on the config schema
"$schema" = 'https://starship.rs/config-schema.json'

# Let commands have up to 1200ms before Starship warns
command_timeout = 1200

# Inserts a blank line between shell prompts
add_newline = true

format = """
$os\
[ÓÇ∞ ](fg:black inverted bg:bright-blue)\
$username\
$hostname\
[ ](fg:blue bg:black)[ÓÇ∞ ](fg:black bg:blue)\
$directory\
[ÓÇ∞ ](fg:blue)\
${custom.docker}\
$helm\
$terraform\
$python\
$git_branch\
$git_commit\
$git_state\
$git_metrics\
$git_status\
$line_break\
${custom.git_config_email}\
${custom.dotfiles_head}${custom.dotfiles_changes}${custom.dotfiles_commits_ahead}${custom.dotfiles_commits_behind}${custom.dotfiles_tail}\
$character"""

right_format = """$status${custom.kubeadmin_divider}${custom.kube_print_cached}$battery$time"""

[battery]
format = '[ $symbol$percentage]($style)'
disabled = false
[[battery.display]]
threshold = 15
style = 'fg:bright-red bold'
[[battery.display]]
threshold = 50
style = 'fg:#F78000 bold'

[character]
error_symbol = "[‚úó](bold bright-red)"
success_symbol = "[ÔÑÅ](bold bright-green)"

[cmd_duration]
format = "[$duration ]($style)"

[directory]
format = '[$path ]($style)'
truncation_length = 3
truncation_symbol = '‚Ä¶/'
style = "fg:bold bright-yellow bg:blue"

[directory.substitutions]
"~" = "ÔÄï "
"Desktop" = "ÔÑà "
"Documents" = "Û∞àô"
"Downloads" = "ÔÄô "
"Finances" = "ÔÖï"
"GoogleDrive" = "Ôãü "
"Movies" = "ÔÄΩ "
"Music" = "ÔÄÅ "
"Pictures" = "ÔÄæ "
"Projects" = "ÔÑ° "
"Public" = "ÔÉÇ "
"public_html" = "ÔÉÇ "
"RedHat" = "ÓΩù "
"Videos" = "ÔÄΩ "

[fill]
symbol = ' '

[git_branch]
format = "[$symbol$branch(:$remote_branch)]($style) "
symbol = "Ôêò "
disabled = false

[git_commit]
format = '[\($hash$tag\)]($style) '
disabled = false

[git_metrics]
format = '([+$added]($added_style) )([-$deleted]($deleted_style) )'
disabled = false

[git_status]
format = '([\[$all_status$ahead_behind\]]($style) )'
ahead = '‚á°${count}'
behind = '‚á£${count}'
diverged = '‚áï‚á°${ahead_count}‚á£${behind_count}'
modified = "¬±"
disabled = false

[git_state]
format = '\([$state( $progress_current/$progress_total)]($style)\) '
disabled = false

[helm]
format = "[$symbol]($style) "
symbol = "Óüª "
disabled = true

[hostname]
ssh_only = false
# Hide the hostname in remote tmux sessions
detect_env_vars = ['!TMUX', 'SSH_CONNECTION']
format = '[@$hostname[$ssh_symbol](fg:bright-red bold bg:black)]($style)'
ssh_symbol = ' üåê'
style = "fg:bright-green bold bg:black"

[kubernetes]
format      = "[ $symbol$context/$user( \\($namespace\\)) ]($style)"
symbol      = "Û±Éæ "
disabled    = false

[custom.kube_print_cached]
description = "Render built-in kubernetes module only when cached auth is valid"
shell  = ["bash"]   # ‚Üê no -lc
when = """
S="$HOME/.cache/kube-auth-status"; [ -r "$S" ] || exit 1
ts=$(awk -F= '$1=="ts"{print $2}' "$S")
auth_status=$(awk -F= '$1=="status"{print $2}' "$S")
[ "${auth_status:-invalid}" = "valid" ] || exit 1
max_age="${KUBE_CACHE_MAX_AGE:-1800}"
now=$(date +%s)
[ -n "$ts" ] && [ $((now - ts)) -le "$max_age" ]
"""
command = "/usr/bin/env starship module kubernetes"
format  = "$output"

[custom.kubeadmin_divider]
description = "Left divider only for kube:admin in matching OCP contexts (cached)"
shell = ["bash"]   # ‚Üê no -lc
command = "true"
format  = "[ÓÇ≤]($style)"
style   = "fg:bright-red bg:black"
when = """
S="$HOME/.cache/kube-auth-status"; [ -r "$S" ] || exit 1
ts=$(awk -F= '$1=="ts"{print $2}' "$S")
auth_status=$(awk -F= '$1=="status"{print $2}' "$S")
ctx=$(awk -F= '$1=="context"{print $2}' "$S")
usr=$(awk -F= '$1=="user"{print $2}' "$S")
[ "${auth_status:-invalid}" = "valid" ] || exit 1
max_age="${KUBE_CACHE_MAX_AGE:-1800}"
now=$(date +%s); [ -n "$ts" ] && [ $((now - ts)) -le "$max_age" ] || exit 1
printf '%s' "$ctx" | grep -Eq '.*/api-[[:alnum:]_-]+-(ocp4?|openshift|osh)-.*' || exit 1
printf '%s' "$usr" | grep -Eq 'kube:?admin(/|$)'
"""

# --- OpenShift Local (CRC) ‚Äî match CRC first, no harsh warning styles ---

[[kubernetes.contexts]]
# Accepts "crc-<cluster>" with optional ".../api-" prefix
context_pattern = "(^|.*/api-)crc-(?P<cluster>[\\w-]+)(-|:6443).*"
context_alias   = "crc-$cluster"
# kubeadmin on CRC: allowed / de-emphasized
user_pattern    = "kube:?admin(/|).*"
user_alias      = "kubeadmin"
style           = "fg:bold bright-red"  # non-inverted, subtle

[[kubernetes.contexts]]
# Any other user on CRC
context_pattern = "(^|.*/api-)crc-(?P<cluster>[\\w-]+)(-|:6443).*"
context_alias   = "crc-$cluster"
user_pattern    = "(?P<user>[\\w-]+)(@[^/]+)?(/|).*"
user_alias      = "$user"

# --- OpenShift (non-CRC) ‚Äî OCP / openshift / osh clusters ---

[[kubernetes.contexts]]
# OCP/openshift contexts get strong warning when kubeadmin
context_pattern = ".*/api-(?P<cluster>[\\w-]+)-(ocp4?|openshift|osh)-.*"
context_alias   = "$cluster"
user_pattern    = "kube:?admin/.*"
user_alias      = "**KUBEADMIN**"
style           = "fg:bold bright-red inverted"

[[kubernetes.contexts]]
# Service accounts (sa-<name>) on OCP ‚Äî warn (non-inverted)
context_pattern = ".*/api-(?P<cluster>[\\w-]+)-(ocp4?|openshift|osh)-.*"
context_alias   = "$cluster"
user_pattern    = "(sa)-(?P<user>[\\w-]+)(@[^/]+)?/.*"
user_alias      = "sa-$user"
style           = "fg:bold bright-red"

[[kubernetes.contexts]]
# Any other user on OCP
context_pattern = ".*/api-(?P<cluster>[\\w-]+)-(ocp4?|openshift|osh)-.*"
context_alias   = "$cluster"
user_pattern    = "(?P<user>[\\w-]+)(@[^/]+)?/.*"
user_alias      = "$user"

# --- Catch-alls for non-CRC, non-OCP Kubernetes clusters (GKE/EKS/AKS/vanilla) ---

[[kubernetes.contexts]]
# kubeadmin on any other cluster name ‚Äî strong warning
context_pattern = ".*"
context_alias   = "$context"
user_pattern    = "kube:?admin(/|).*"
user_alias      = "**KUBEADMIN**"
style           = "fg:bold bright-red inverted"

[[kubernetes.contexts]]
# service account on any other cluster ‚Äî warn
context_pattern = ".*"
context_alias   = "$context"
user_pattern    = "(sa)-(?P<user>[\\w-]+)(@[^/]+)?/.*"
user_alias      = "sa-$user"
style           = "fg:bold bright-red"

[[kubernetes.contexts]]
# any other user on any other cluster
context_pattern = ".*"
context_alias   = "$context"
user_pattern    = "(?P<user>[\\w-]+)(@[^/]+)?/.*"
user_alias      = "$user"


[os]
disabled  = false
format    = "[ $symbol ]($style)"
style     = "fg:black bg:bright-blue"

[os.symbols]
AlmaLinux         = "Ôåù"
Alpine            = "ÔåÄ"
Amazon            = "Ôâ∞"
Android           = "ÔÖª"
Arch              = "ÔåÉ"
CentOS            = "ÔåÑ"
Debian            = "ÔåÜ"
Fedora            = "Ôåä"
FreeBSD           = "Ôåå"
Kali              = "Ôåß"
Linux             = "Ôåö"
Macos             = "ÔåÇ"
openSUSE          = "ÓΩ≠"
OracleLinux       = "Ôåö"
Raspbian          = "Ôåï"
Redhat            = "ÓΩù"
RedHatEnterprise  = "ÓΩù"
RockyLinux        = "Ôå´"
SUSE              = "ÓΩ≠"
Ubuntu            = "Ôåõ"
Unknown           = "ÔÑ®"
Windows           = "ÔÖ∫"

[python]
format = '[$symbol]($style) '
symbol = 'Ó¥õ '
disabled = true

[sudo]
disabled = false
format = "[$user]($style)"
style = "fg:bright-red bold"

[status]
symbol = '‚úò'
disabled = false

[terraform]
format = '[$symbol $workspace]($style) '
symbol = 'Û±Å¢ '
disabled = true

[time]
time_format = "%H:%M"
disabled = false
format = ' [$time]($style) '
style = "fg:bright-yellow bold"

[username]
format = "[$user]($style)"
show_always = true
style_user = "fg:bright-green bold bg:black"
style_root = "fg:bright-red bold inverted"

[custom.docker]
format = '[$symbol]($style) '
style = 'fg:bold blue'
symbol = 'Ôàü '
when = '[[ -f docker-compose.yml ]] || [[ -f docker-compose.yaml ]] || [[ -f Dockerfile ]]'
disabled = true

#
# Show user.email when in git repo
#
[custom.git_config_email]
description = "The git user's configured email address"
command     = "git config user.email || echo 'undefined user.email'"
format      = "[ Û∞ä¢  $output [ÓÇ∞](fg:bright-white)\n]($style)"
when        = "git rev-parse --is-inside-work-tree >/dev/null 2>&1"
style       = "fg:bright-white bold inverted"

[custom.dotfiles_head]
description = "A head character for custom.dotfiles* commands"
format      = "[ Û±Çµ]($style)"
when        = '[ -d "$HOME/.dotfiles" ] && [ "$PWD" = "$HOME" ]'
style       = "fg:bright-purple inverted bg:black"

[custom.dotfiles_tail]
description = "A tail character for custom.dotfiles* commands"
format      = "[ [ÓÇ∞](fg:bright-purple)\n]($style)"
when        = '[ -d "$HOME/.dotfiles" ] && [ "$PWD" = "$HOME" ]'
style       = "fg:bright-purple inverted bg:black"

[custom.dotfiles_changes]
description = "The number of dotfiles modified, added, deleted, or renamed"
command     = 'git --git-dir="$HOME/.dotfiles" --work-tree="$HOME" status --porcelain | wc -l'
format      = "[ ÔëÄ$output]($style)"
when        = '[ -d "$HOME/.dotfiles" ] && [ "$PWD" = "$HOME" ] && [ "$(git --git-dir="$HOME/.dotfiles" --work-tree="$HOME" status --porcelain | wc -l)" -gt 0 ]'
style       = "fg:bright-purple inverted bg:black"

[custom.dotfiles_commits_ahead]
description = "The number of dotfiles commits ahead of upstream"
command     = 'git --git-dir="$HOME/.dotfiles" --work-tree="$HOME" rev-list --count @{u}..HEAD 2>/dev/null'
format      = "[ ÔÅ¢$output]($style)"
when        = '[ -d "$HOME/.dotfiles" ] && [ "$PWD" = "$HOME" ] && n=$(git --git-dir="$HOME/.dotfiles" --work-tree="$HOME" rev-list --count @{u}..HEAD 2>/dev/null); [ "${n:-0}" -gt 0 ]'
style       = "fg:bright-purple inverted bg:black"

[custom.dotfiles_commits_behind]
description = "The number of dotfiles commits behind upstream"
command     = 'git --git-dir="$HOME/.dotfiles" --work-tree="$HOME" rev-list --count HEAD..@{u} 2>/dev/null'
format      = "[ ÔÅ£$output]($style)"
when        = '[ -d "$HOME/.dotfiles" ] && [ "$PWD" = "$HOME" ] && n=$(git --git-dir="$HOME/.dotfiles" --work-tree="$HOME" rev-list --count HEAD..@{u} 2>/dev/null); [ "${n:-0}" -gt 0 ]'
style       = "fg:bright-purple inverted bg:black"

